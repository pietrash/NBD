package dao;

import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.api.mapper.entity.saving.NullSavingStrategy;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import model.ClientAddress;
import model.ClientAddressHelper__MapperGenerated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class ClientDaoImpl__MapperGenerated extends DaoBase implements ClientDao {
  private static final Logger LOG = LoggerFactory.getLogger(ClientDaoImpl__MapperGenerated.class);

  private final ClientAddressHelper__MapperGenerated clientAddressHelper;

  private final PreparedStatement findByIdStatement;

  private final PreparedStatement saveStatement;

  private final PreparedStatement deleteByIdStatement;

  private ClientDaoImpl__MapperGenerated(MapperContext context,
      ClientAddressHelper__MapperGenerated clientAddressHelper, PreparedStatement findByIdStatement,
      PreparedStatement saveStatement, PreparedStatement deleteByIdStatement) {
    super(context);
    this.clientAddressHelper = clientAddressHelper;
    this.findByIdStatement = findByIdStatement;
    this.saveStatement = saveStatement;
    this.deleteByIdStatement = deleteByIdStatement;
  }

  @Override
  public ClientAddress findById(int id) {
    BoundStatementBuilder boundStatementBuilder = findByIdStatement.boundStatementBuilder();
    boundStatementBuilder = populateBoundStatementWithStatementAttributes(boundStatementBuilder, "", "QUORUM", "", null, -2147483648, "", "");
    boundStatementBuilder = boundStatementBuilder.setInt("id", id);
    BoundStatement boundStatement = boundStatementBuilder.build();
    return executeAndMapToSingleEntity(boundStatement, clientAddressHelper);
  }

  @Override
  public void save(ClientAddress client) {
    BoundStatementBuilder boundStatementBuilder = saveStatement.boundStatementBuilder();
    boundStatementBuilder = populateBoundStatementWithStatementAttributes(boundStatementBuilder, "", "QUORUM", "", null, -2147483648, "", "");
    clientAddressHelper.set(client, boundStatementBuilder, NullSavingStrategy.DO_NOT_SET, false);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  @Override
  public void deleteById(int id) {
    BoundStatementBuilder boundStatementBuilder = deleteByIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.setInt("id", id);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<ClientDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    throwIfProtocolVersionV3(context);
    try {
      // Initialize all entity helpers
      ClientAddressHelper__MapperGenerated clientAddressHelper = new ClientAddressHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        clientAddressHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `findById(int)`:
      SimpleStatement findByIdStatement_simple = clientAddressHelper.selectByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method findById(int)",
          context.getSession().getName(),
          findByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> findByIdStatement = prepare(findByIdStatement_simple, context);
      prepareStages.add(findByIdStatement);
      // Prepare the statement for `save(model.ClientAddress)`:
      SimpleStatement saveStatement_simple = clientAddressHelper.insert().build();
      LOG.debug("[{}] Preparing query `{}` for method save(model.ClientAddress)",
          context.getSession().getName(),
          saveStatement_simple.getQuery());
      CompletionStage<PreparedStatement> saveStatement = prepare(saveStatement_simple, context);
      prepareStages.add(saveStatement);
      // Prepare the statement for `deleteById(int)`:
      SimpleStatement deleteByIdStatement_simple = clientAddressHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method deleteById(int)",
          context.getSession().getName(),
          deleteByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteByIdStatement = prepare(deleteByIdStatement_simple, context);
      prepareStages.add(deleteByIdStatement);
      // Initialize all method invokers
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (ClientDao) new ClientDaoImpl__MapperGenerated(context,
              clientAddressHelper,
              CompletableFutures.getCompleted(findByIdStatement),
              CompletableFutures.getCompleted(saveStatement),
              CompletableFutures.getCompleted(deleteByIdStatement)))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static ClientDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
