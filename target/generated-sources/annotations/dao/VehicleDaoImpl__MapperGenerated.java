package dao;

import com.datastax.oss.driver.api.core.cql.BoundStatement;
import com.datastax.oss.driver.api.core.cql.BoundStatementBuilder;
import com.datastax.oss.driver.api.core.cql.PreparedStatement;
import com.datastax.oss.driver.api.core.cql.SimpleStatement;
import com.datastax.oss.driver.api.mapper.MapperContext;
import com.datastax.oss.driver.internal.core.util.concurrent.BlockingOperation;
import com.datastax.oss.driver.internal.core.util.concurrent.CompletableFutures;
import com.datastax.oss.driver.internal.mapper.DaoBase;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.lang.Throwable;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import model.BicycleHelper__MapperGenerated;
import model.CarHelper__MapperGenerated;
import model.MotorcycleHelper__MapperGenerated;
import model.Vehicle;
import model.VehicleHelper__MapperGenerated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import queryProviders.VehicleQueryProvider;

/**
 * Generated by the DataStax driver mapper, do not edit directly.
 */
@SuppressWarnings("all")
public class VehicleDaoImpl__MapperGenerated extends DaoBase implements VehicleDao {
  private static final Logger LOG = LoggerFactory.getLogger(VehicleDaoImpl__MapperGenerated.class);

  private final CarHelper__MapperGenerated carHelper;

  private final MotorcycleHelper__MapperGenerated motorcycleHelper;

  private final BicycleHelper__MapperGenerated bicycleHelper;

  private final VehicleHelper__MapperGenerated vehicleHelper;

  private final PreparedStatement deleteByIdStatement;

  private final VehicleQueryProvider findByIdInvoker;

  private final VehicleQueryProvider saveInvoker;

  private VehicleDaoImpl__MapperGenerated(MapperContext context,
      CarHelper__MapperGenerated carHelper, MotorcycleHelper__MapperGenerated motorcycleHelper,
      BicycleHelper__MapperGenerated bicycleHelper, VehicleHelper__MapperGenerated vehicleHelper,
      PreparedStatement deleteByIdStatement, VehicleQueryProvider findByIdInvoker,
      VehicleQueryProvider saveInvoker) {
    super(context);
    this.carHelper = carHelper;
    this.motorcycleHelper = motorcycleHelper;
    this.bicycleHelper = bicycleHelper;
    this.vehicleHelper = vehicleHelper;
    this.deleteByIdStatement = deleteByIdStatement;
    this.findByIdInvoker = findByIdInvoker;
    this.saveInvoker = saveInvoker;
  }

  @Override
  public Vehicle findById(String id) {
    return findByIdInvoker.findById(id);
  }

  @Override
  public void save(Vehicle vehicle) {
    saveInvoker.save(vehicle);
  }

  @Override
  public void deleteById(String id) {
    BoundStatementBuilder boundStatementBuilder = deleteByIdStatement.boundStatementBuilder();
    boundStatementBuilder = boundStatementBuilder.set("id", id, String.class);
    BoundStatement boundStatement = boundStatementBuilder.build();
    execute(boundStatement);
  }

  public static CompletableFuture<VehicleDao> initAsync(MapperContext context) {
    LOG.debug("[{}] Initializing new instance for keyspace = {} and table = {}",
        context.getSession().getName(),
        context.getKeyspaceId(),
        context.getTableId());
    try {
      // Initialize all entity helpers
      CarHelper__MapperGenerated carHelper = new CarHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        carHelper.validateEntityFields();
      }
      MotorcycleHelper__MapperGenerated motorcycleHelper = new MotorcycleHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        motorcycleHelper.validateEntityFields();
      }
      BicycleHelper__MapperGenerated bicycleHelper = new BicycleHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        bicycleHelper.validateEntityFields();
      }
      VehicleHelper__MapperGenerated vehicleHelper = new VehicleHelper__MapperGenerated(context);
      if ((Boolean)context.getCustomState().get("datastax.mapper.schemaValidationEnabled")) {
        vehicleHelper.validateEntityFields();
      }
      List<CompletionStage<PreparedStatement>> prepareStages = new ArrayList<>();
      // Prepare the statement for `deleteById(java.lang.String)`:
      SimpleStatement deleteByIdStatement_simple = vehicleHelper.deleteByPrimaryKeyParts(1).build();
      LOG.debug("[{}] Preparing query `{}` for method deleteById(java.lang.String)",
          context.getSession().getName(),
          deleteByIdStatement_simple.getQuery());
      CompletionStage<PreparedStatement> deleteByIdStatement = prepare(deleteByIdStatement_simple, context);
      prepareStages.add(deleteByIdStatement);
      // Initialize all method invokers
      VehicleQueryProvider findByIdInvoker = new VehicleQueryProvider(context, carHelper, motorcycleHelper, bicycleHelper);
      VehicleQueryProvider saveInvoker = new VehicleQueryProvider(context, carHelper, motorcycleHelper, bicycleHelper);
      // Build the DAO when all statements are prepared
      return CompletableFutures.allSuccessful(prepareStages)
          .thenApply(v -> (VehicleDao) new VehicleDaoImpl__MapperGenerated(context,
              carHelper,
              motorcycleHelper,
              bicycleHelper,
              vehicleHelper,
              CompletableFutures.getCompleted(deleteByIdStatement),
              findByIdInvoker,
              saveInvoker))
          .toCompletableFuture();
    } catch (Throwable t) {
      return CompletableFutures.failedFuture(t);
    }
  }

  public static VehicleDao init(MapperContext context) {
    BlockingOperation.checkNotDriverThread();
    return CompletableFutures.getUninterruptibly(initAsync(context));
  }
}
